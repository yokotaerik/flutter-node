import 'package:flutter/material.dart';
import 'package:ex1/models/tarefa.dart';
import 'package:ex1/services/tarefa_service.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Gerenciador de Tarefas',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
        useMaterial3: true,
      ),
      home: const TarefasScreen(),
    );
  }
}

class TarefasScreen extends StatefulWidget {
  const TarefasScreen({super.key});

  @override
  State<TarefasScreen> createState() => _TarefasScreenState();
}

class _TarefasScreenState extends State<TarefasScreen> {
  final TarefaService _tarefaService = TarefaService();
  List<Tarefa> _tarefas = [];
  bool _isLoading = true;
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    _loadTarefas();
  }

  Future<void> _loadTarefas() async {
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      final tarefas = await _tarefaService.getTarefas();
      setState(() {
        _tarefas = tarefas;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _errorMessage = 'Erro ao carregar tarefas: ${e.toString()}';
        _isLoading = false;
      });
      print('Erro ao carregar tarefas: $e');
    }
  }

  Future<void> _addTarefa() async {
    final TextEditingController tituloController = TextEditingController();
    final TextEditingController descricaoController = TextEditingController();

    await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Nova Tarefa'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: tituloController,
              decoration: const InputDecoration(labelText: 'Título'),
            ),
            TextField(
              controller: descricaoController,
              decoration: const InputDecoration(labelText: 'Descrição'),
              maxLines: 3,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancelar'),
          ),
          TextButton(
            onPressed: () async {
              if (tituloController.text.isNotEmpty) {
                Navigator.pop(context);
                try {
                  await _tarefaService.createTarefa(
                    tituloController.text,
                    descricaoController.text,
                  );
                  await _loadTarefas();
                  if (mounted) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('Tarefa adicionada com sucesso!'),
                      ),
                    );
                  }
                } catch (e) {
                  if (mounted) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text('Erro ao adicionar tarefa: ${e.toString()}'),
                      ),
                    );
                  }
                }
              }
            },
            child: const Text('Salvar'),
          ),
        ],
      ),
    );
  }

  Future<void> _toggleTarefaConcluida(Tarefa tarefa) async {
    try {
      tarefa.concluida = !tarefa.concluida;
      await _tarefaService.updateTarefa(tarefa);
      await _loadTarefas();
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erro ao atualizar tarefa: ${e.toString()}'),
          ),
        );
      }
    }
  }

  Future<void> _deleteTarefa(Tarefa tarefa) async {
    try {
      await _tarefaService.deleteTarefa(tarefa.id);
      await _loadTarefas();
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Tarefa removida com sucesso!'),
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erro ao remover tarefa: ${e.toString()}'),
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Gerenciador de Tarefas'),
        backgroundColor: Theme.of(context).colorScheme.primary,
        foregroundColor: Colors.white,
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : _errorMessage != null
              ? Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        _errorMessage!,
                        style: const TextStyle(color: Colors.red),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 16),
                      const Text(
                        'Verifique se o servidor da API está em execução e tente novamente.',
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 16),
                      ElevatedButton(
                        onPressed: _loadTarefas,
                        child: const Text('Tentar novamente'),
                      ),
                    ],
                  ),
                )
              : _tarefas.isEmpty
                  ? const Center(
                      child: Text(
                        'Nenhuma tarefa encontrada.\nAdicione uma nova tarefa!',
                        textAlign: TextAlign.center,
                      ),
                    )
                  : RefreshIndicator(
                      onRefresh: _loadTarefas,
                      child: ListView.builder(
                        itemCount: _tarefas.length,
                        itemBuilder: (context, index) {
                          final tarefa = _tarefas[index];
                          return Dismissible(
                            key: Key(tarefa.id),
                            background: Container(
                              color: Colors.red,
                              alignment: Alignment.centerRight,
                              padding: const EdgeInsets.only(right: 16.0),
                              child: const Icon(
                                Icons.delete,
                                color: Colors.white,
                              ),
                            ),
                            direction: DismissDirection.endToStart,
                            onDismissed: (direction) {
                              _deleteTarefa(tarefa);
                            },
                            child: ListTile(
                              title: Text(
                                tarefa.titulo,
                                style: TextStyle(
                                  decoration: tarefa.concluida
                                      ? TextDecoration.lineThrough
                                      : null,
                                ),
                              ),
                              subtitle: Text(tarefa.descricao),
                              leading: Checkbox(
                                value: tarefa.concluida,
                                onChanged: (bool? value) {
                                  _toggleTarefaConcluida(tarefa);
                                },
                              ),
                              trailing: IconButton(
                                icon: const Icon(Icons.delete),
                                onPressed: () => _deleteTarefa(tarefa),
                              ),
                            ),
                          );
                        },
                      ),
                    ),
      floatingActionButton: FloatingActionButton(
        onPressed: _addTarefa,
        tooltip: 'Adicionar Tarefa',
        child: const Icon(Icons.add),
      ),
    );
  }
}
